add_executable(chess
    main.cpp
    src/draw_board.cpp
    src/event_handler.cpp)
set_target_properties(chess PROPERTIES LINK_FLAGS_DEBUG "/SUBSYSTEM:CONSOLE")
set_target_properties(chess PROPERTIES LINK_FLAGS_RELEASE "/SUBSYSTEM:WINDOWS")

#Create a symlink in app directory for easier access
# add_custom_command(TARGET chess POST_BUILD
#     COMMAND ${CMAKE_COMMAND} -E create_symlink
#     ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/chess.exe
#     ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/../chess.exe
#     COMMENT "Creating symbolic link to chess.exe"
# )

find_package(NanoSVG CONFIG REQUIRED)
target_link_libraries(chess PRIVATE NanoSVG::nanosvg NanoSVG::nanosvgrast)

#Include SFML
set(SFML_STATIC_LIBRARIES TRUE)
if (CMAKE_BUILD_TYPE STREQUAL "DEBUG")
    find_package(SFML 2.6.0
        COMPONENTS
            system-d window-d graphics-d audio-d
        CONFIG
        REQUIRED
    )
    install(FILES $<TARGET_PDB_FILE:${chess}> DESTINATION bin OPTIONAL)
else()
    find_package(SFML 2.6.0
        COMPONENTS
            system window graphics audio
        CONFIG
        REQUIRED
    )
endif()

target_compile_features(chess PRIVATE cxx_std_20)
target_compile_definitions(chess PRIVATE SFML_DYNAMIC)
target_link_libraries(chess PRIVATE sfml-window sfml-graphics sfml-system)

#Move generation library
target_link_libraries(chess PRIVATE "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/MoveGeneration.lib")
target_include_directories(chess PRIVATE "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/include")